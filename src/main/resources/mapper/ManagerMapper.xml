<?xml version="1.0" encoding="UTF-8"?> 
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- 맵핑될 DAO 인터페이스의 Full name 을 줍니다. -->
<mapper namespace="ManagerMapper">
	<select id="findManager" resultType="UserVO">
		SELECT *
		FROM USER_T
		WHERE
		user_email = #{email} and user_join_type = 'MANAGER'
	</select>

	<select id="loginManager" resultType="UserVO">
		SELECT *
		FROM USER_T
		WHERE
		user_email = #{email} and user_password = #{password}
	</select>

	<insert id="addManager" parameterType="UserVO">
		INSERT INTO USER_T (user_email, user_password, user_nickname, user_join_date, user_join_type)
		VALUES (#{email}, #{password}, #{nickname}, #{joinDate}, #{joinType})
	</insert>

	<insert id="addGoods" parameterType="GoodsVO">
		INSERT INTO GOODS_T (goods_seq, goods_cost, goods_stock, goods_crt_date, coods_contents, goods_subject, goods_main_pic_url)
		VALUES (GOODS_SEQUENCE.NEXTVAL, #{cost}, #{stock}, #{crtDate}, #{contents}, #{subject}, #{mainPicUrl})
		<selectKey keyProperty="goodsSeq" resultType="Integer"
			order="AFTER">
			SELECT GOODS_SEQUENCE.CURRVAL FROM DUAL
		</selectKey>
	</insert>


	<resultMap id="getGoodsListResult" type="GoodsVO">
		<id column="goods_seq" property="goodsSeq" />
		<result column="goods_subject" property="subject" />
		<result column="goods_cost" property="cost" />
		<result column="goods_stock" property="stock" />
		<result column="goods_main_pic_url" property="mainPicUrl" />
		<result column="goods_contents" jdbcType="CLOB" property="contents" javaType="java.lang.String" />
		<result column="goods_crt_date" property="crtDate" />
	</resultMap>

	<select id="getGoodsOne" resultMap="getGoodsListResult">
		SELECT *
		FROM GOODS_T
		WHERE
		goods_seq = #{goodsSeq}
	</select>

	<update id="updateGoodsOne" parameterType="GoodsVO">
		UPDATE GOODS_T
		SET
			goods_subject = #{subject},
			goods_cost = #{cost},
			goods_stock = #{stock},
			goods_main_pic_url = #{mainPicUrl},
			goods_contents = #{contents}
		WHERE goods_seq = #{goodsSeq}
	</update>
	
	<select id="getUserOne" resultType="UserVO">
		SELECT *
		FROM USER_T
		WHERE
		user_email = #{email}
	</select>

	<update id="updateUserOne" parameterType="UserVO">
		UPDATE USER_T
		SET
			user_phone_num = #{phonNum},
			user_addr_city = #{addrCity},
			user_addr_area = #{addrArea},
			user_addr_detail = #{addrDetail},
			user_name = #{name},
		 	user_nickname = #{nickname}
		WHERE user_email = #{email}
	</update>

	<select id="goodsTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM
		GOODS_T
		<include refid="search"></include>
	</select>
	
	<select id="userTotalCount" resultType="int">
		SELECT COUNT(*)
		FROM
		USER_T
		<include refid="search"></include>
	</select>
	 

	<!-- 게시글 전체 목록 조회 및 검색조회까지 -->
	<select id="getGoodsList" resultMap="getGoodsListResult">
		<!-- 목록 조회 및 페이징 전체 쿼리 -->
		<include refid="pagingHeader"></include>
		SELECT *
		FROM GOODS_T
		<include refid="search"></include>
		ORDER BY goods_seq DESC
		<include refid="pagingFooter"></include>
	</select>
	
	<select id="getUserList" resultType="UserVO">
		<!-- 목록 조회 및 페이징 전체 쿼리 -->
		<include refid="pagingHeader"></include>
		SELECT *
		FROM USER_T
		<include refid="search"></include>
		ORDER BY join_date DESC
		<include refid="pagingFooter"></include>
	</select>

	<!-- 검색 조건 sql -->
	<sql id="search">
		<choose>
			<!-- 검색옵션이 전체 검색일 경우 -->
			<when test="searchOption == 'allGoods'">
				WHERE
				(goods_subject like '%'||#{keyword}||'%'
				OR goods_contents LIKE '%'||#{keyword}||'%')
			</when>
			<when test="searchOption == 'allUser'">
				WHERE
				(user_email like '%'||#{keyword}||'%'
				OR user_nickname LIKE '%'||#{keyword}||'%')
			</when>
			<!-- 전체 검색이 아닐 경우 -->
			<otherwise>
				WHERE
				${searchOption} LIKE '%'||#{keyword}||'%'
			</otherwise>
		</choose>
	</sql>

	<!-- 페이징 sql -->
	<sql id="pagingHeader">
		SELECT X.* FROM (
		SELECT ROWNUM AS rnum, A.* FROM (
	</sql>
	<sql id="pagingFooter">
		) A
		<![CDATA[
		WHERE ROWNUM <= #{end} ) X
		WHERE X.rnum >= #{start}
		]]>
	</sql> 

	<delete id="deleteGoodsList" parameterType="java.util.Map">
		DELETE
		FROM GOODS_T
		WHERE
		<foreach collection="goodsSeqList" item="goodsSeq" separator="or" open="(" close=")">
			goods_seq = #{goodsSeq}
		</foreach> 
	</delete>

</mapper>
